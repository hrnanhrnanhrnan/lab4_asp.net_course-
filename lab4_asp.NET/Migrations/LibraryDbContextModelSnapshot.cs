// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab4_asp.NET.Contexts;

namespace lab4_asp.NET.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBorrowed")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Description = "Fantasy om en grupp med personer som ska förstöra en ring",
                            ImageUrl = "\\images\\lotr.jpg",
                            IsBorrowed = true,
                            Title = "Lord of the rings"
                        },
                        new
                        {
                            BookId = 2,
                            Description = "Biografi om en person som vill ha hjälp",
                            ImageUrl = "\\images\\hkohm.jfif",
                            IsBorrowed = false,
                            Title = "Hej kom och hjälp mig!"
                        },
                        new
                        {
                            BookId = 3,
                            Description = "En grupp med superhjätar som ska försvara världen",
                            ImageUrl = "\\images\\avengers.jfif",
                            IsBorrowed = true,
                            Title = "Avengers"
                        },
                        new
                        {
                            BookId = 4,
                            Description = "Superpippi",
                            ImageUrl = "\\images\\pippi.jfif",
                            IsBorrowed = true,
                            Title = "Pippi Långstrump"
                        },
                        new
                        {
                            BookId = 5,
                            Description = "Verklighetsbaserad bok om en unge som lär sig magi",
                            ImageUrl = "\\images\\harryp.jfif",
                            IsBorrowed = true,
                            Title = "Harry Potter"
                        });
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Storgatan 11, 89139 Övik",
                            Name = "Robin",
                            PhoneNumber = "0705837487837"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Björkgatan 400, 90326 Umeå",
                            Name = "Peter",
                            PhoneNumber = "09087238173"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Storgatan 11, 89139 Övik",
                            Name = "Maja",
                            PhoneNumber = "0709348492834"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Hållgatan 1, 891340 Övik",
                            Name = "Petra",
                            PhoneNumber = "070565675"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "Gatan 3, 89111 Övik",
                            Name = "Sandra",
                            PhoneNumber = "0705469456"
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "Storgatan 10, 90333 Umeå",
                            Name = "Håkan",
                            PhoneNumber = "090123001239"
                        },
                        new
                        {
                            CustomerId = 7,
                            Address = "Storgatan 1, 89138 Övik",
                            Name = "Mendela",
                            PhoneNumber = "07056045964"
                        });
                });

            modelBuilder.Entity("Models.CustomerBook", b =>
                {
                    b.Property<int>("CustomerBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndLoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBooks");

                    b.HasData(
                        new
                        {
                            CustomerBookId = 1,
                            BookId = 1,
                            CustomerId = 1,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 2,
                            BookId = 3,
                            CustomerId = 1,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 3,
                            BookId = 3,
                            CustomerId = 2,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 4,
                            BookId = 4,
                            CustomerId = 2,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 5,
                            BookId = 5,
                            CustomerId = 2,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 6,
                            BookId = 5,
                            CustomerId = 3,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 7,
                            BookId = 5,
                            CustomerId = 4,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 8,
                            BookId = 1,
                            CustomerId = 5,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 9,
                            BookId = 4,
                            CustomerId = 6,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 10,
                            BookId = 1,
                            CustomerId = 7,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            CustomerBookId = 11,
                            BookId = 5,
                            CustomerId = 7,
                            EndLoanDate = new DateTime(2022, 6, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            LoanDate = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Models.CustomerBook", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("CustomerBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
